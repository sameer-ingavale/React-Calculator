{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","props","handleKeyDown","event","key","setState","displayValue","state","String","inputDot","computeEqual","clearValue","previousValue","currentOperand","waitingForValue","operatorActive","changeSign","charAt","substr","percentify","displayFloat","parseFloat","indexOf","computeOperator","operand","answer","eval","input","bind","document","addEventListener","this","digit","id","className","onClick","src","logo","alt","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd5325f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displayValue: '0',\n      previousValue: null,\n      waitingForValue: false,\n      currentOperand: null,\n      operatorActive: false\n    }\n\n    this.input = this.input.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown',this.handleKeyDown);\n}\n\n  handleKeyDown = (event) => {\n\n    if(event.key === '1' ||  event.key ==='2' || event.key ==='3' || event.key ==='4' || event.key ==='5' || event.key ==='6' || event.key ==='7' || event.key ==='8' || event.key ==='9' || event.key ==='0')\n    {\n    this.setState({\n    displayValue: this.state.displayValue === '0' ? String(event.key) : this.state.displayValue + String(event.key)})\n    } else if(event.key === 'Backspace') {\n      this.setState({displayValue: '0'})\n    } else if(event.key === '.') {\n      this.inputDot();\n    } else if(event.key === '=') {\n      this.computeEqual()\n    }\n\n}\n\n  clearValue = () => (\n    this.setState({\n      displayValue: '0',\n      previousValue: null,\n      currentOperand: null,\n      waitingForValue: false,\n      operatorActive: false\n    })\n  )\n\n  input(digit) {\n\n    const { displayValue, waitingForValue, operatorActive } = this.state;\n    \n    if(waitingForValue === true && operatorActive === false) {\n        this.setState({\n          previousValue: displayValue,\n          displayValue: String(digit),\n          waitingForValue: false,\n          operatorActive: true\n        })\n    } else if(waitingForValue) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForValue:false\n      })\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + String(digit)\n      })\n    } \n  }\n\n  changeSign = () => {\n\n    const {displayValue} = this.state;\n    this.setState({displayValue: displayValue.charAt(0) !== '-' ? '-' + displayValue : displayValue.substr(1)})\n  }\n\n  percentify = () => {\n\n    const {displayValue} = this.state;\n    const displayFloat = parseFloat(displayValue);\n    this.setState({ displayValue: String(displayFloat/100)})\n  }\n\n  inputDot = () => {\n\n    const { displayValue, waitingForValue } = this.state;\n\n    if(waitingForValue) {\n      this.setState({\n        displayValue: '.',\n        waitingForValue: false\n      })\n    } else {\n      this.setState({displayValue: displayValue.indexOf('.') === -1 ? displayValue + '.' : displayValue})\n    }\n  }\n\n  computeOperator = (operand) => {\n\n    if(this.state.waitingForValue === true && this.state.operatorActive === false) {\n      return this.state\n    } else if (this.state.operatorActive) {\n      this.computeEqual();\n      this.setState({\n        waitingForValue: true,\n        operatorActive: false,\n        previousValue: this.state.displayValue\n      })\n    } else {\n      this.setState({\n        previousValue: this.state.displayValue,\n        waitingForValue: true,\n        operatorActive: true,\n        currentOperand: operand\n      })\n\n    }\n    \n  }\n\n  computeEqual = () => {\n    const answer = String(eval(this.state.previousValue + this.state.currentOperand + this.state.displayValue))\n    this.setState({\n      displayValue: answer,\n      operatorActive: false,\n      waitingForValue: false\n    })\n  }\n\n  render() {\n\n    const { \n      displayValue\n    } = this.state;\n\n    return (\n      <div id='wrapper'>\n      <div className=\"calculator\">\n        <div className='calculator-display'>{displayValue}</div>\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <button className=\"calculator-key key-clear\" onClick={this.clearValue}>{this.state.displayValue === '0' ? 'AC' : 'C'}</button>\n              <button className=\"calculator-key key-sign\" onClick={this.changeSign}>+/-</button>\n              <button className=\"calculator-key key-percent\" onClick={this.percentify}>%</button>\n            </div>\n            <div className=\"digit-keys\">\n              <button className=\"calculator-key key-0\" onClick={() => this.input('0')}>0</button>\n              <button className=\"calculator-key key-dot\" onClick={this.inputDot}>●</button>\n              <button className=\"calculator-key key-1\" onClick={() => this.input('1')}>1</button>\n              <button className=\"calculator-key key-2\" onClick={() => this.input('2')}>2</button>\n              <button className=\"calculator-key key-3\" onClick={() => this.input('3')}>3</button>\n              <button className=\"calculator-key key-4\" onClick={() => this.input('4')}>4</button>\n              <button className=\"calculator-key key-5\" onClick={() => this.input('5')}>5</button>\n              <button className=\"calculator-key key-6\" onClick={() => this.input('6')}>6</button>\n              <button className=\"calculator-key key-7\" onClick={() => this.input('7')}>7</button>\n              <button className=\"calculator-key key-8\" onClick={() => this.input('8')}>8</button>\n              <button className=\"calculator-key key-9\" onClick={() => this.input('9')}>9</button>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            <button className=\"calculator-key key-divide\" onClick={() => this.computeOperator('/')}>÷</button>\n            <button className=\"calculator-key key-multiply\" onClick={() => this.computeOperator('*')}>×</button>\n            <button className=\"calculator-key key-subtract\" onClick={() => this.computeOperator('-')}>−</button>\n            <button className=\"calculator-key key-add\" onClick={() => this.computeOperator('+')}>+</button>\n            <button className=\"calculator-key key-equals\" onClick={this.computeEqual}>=</button>\n          </div>\n        </div>\n      </div>\n    <div className='footer'>\n    <p id='credits'>macOS calculator clone by Sameer Ingavale</p> \n    <img src={logo} className=\"React-logo\" alt=\"react-logo\" />\n    </div>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}